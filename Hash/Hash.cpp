// Hash.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
#include <time.h>
#include <iostream>
//using namespace std;

 int  N = 52;// количество данных в таблице
const int M = 3;//размерность ключа
const int T = 78;//размерность таблицы
int hash[T];
//вариант 64
int sum_i;
void add(int k) {
    int f_k = (k + 49) % T;// вычисляем значение хеш-функции
    int i = 0;//номер пробы
    bool flag = true;
    while (true) {
        if (hash[(f_k + i * i) % T] == k) {
            std::cout << "Элемент с таким кючом находиться в таблице по индексу: " << (f_k + i * i) % T << "\n";
            flag = false;
            break;
        }
        if (hash[(f_k + i * i) % T] == 0){
            
            break;
        }
            
        i++;
    }
     i = 0;
     if(flag)
    while (true) {
        sum_i++;
        if (hash[(f_k + i * i) % T] == 0|| hash[(f_k + i * i) % T] == -1) {//если ячейка свободна или значение в ячейке равно значению вставляемого
            hash[(f_k + i * i) % T] = k;
            break;
        }
        else if (hash[(f_k + i * i) % T] == k)
        {
            std::cout << "Элемент с таким кючом находиться в таблице по индексу: " << (f_k + i * i) % T << "\n";
            break;
        }
        i++;


    }
    N++;
}
void add_rand() {
    int k = rand() % 900 + 100;// получаем рандомное число
    int f_k = (k + 49) % T;// вычисляем значение хеш-функции
    int i = 0;//номер пробы

    while (true) {
        sum_i++;
        if (hash[(f_k + i * i) % T] == 0 ||  hash[(f_k + i * i) % T] == -1) {//если ячейка свободна или значение в ячейке равно значению вставляемого
            hash[(f_k + i * i) % T] = k;
            break;
        }
        else if (hash[(f_k + i * i) % T] == k)
        {
            std::cout << "Элемент с таким кючом находиться в таблице по индексу: " << (f_k + i * i) % T << "\n";
            break;
        }
        i++;


    }
    N++;
}
void del(int k) {
        int f_k = (k + 49) % T;// вычисляем значение хеш-функции
        int i = 0;//номер пробы
      
        
     
        while (true) {
            
            sum_i++;
            if (hash[(f_k + i * i) % T] == k || hash[(f_k + i * i) % T] ==0)
            {
               if(hash[(f_k + i * i) % T] == k)
                hash[(f_k + i * i) % T] =-1;
               
                std::cout << "Элемент с таким кючом удален из таблицы" <<"\n";
                break;
            }
            
          
            i++;


        }
        N--;
    }
void print() {
    for (int i = 0; i < T / 6; i++)
    {

        printf("hash[%2d]= %3d\thash[%2d]= %3d\thash[%2d]= %3d\thash[%2d]= %3d\thash[%2d]= %3d\thash[%2d]= %3d\n", i, hash[i], i + T /6, hash[T / 6 + i], i + T / 3, hash[T /3 + i], i + T / 2, hash[T / 2 + i], i + T*2 /3, hash[T*2 / 3 + i], i + T *5/ 6, hash[T*5 / 6 + i]);
    }
}
void change(int prev, int now) {
    del(prev);
    add(now);
}
void stat() {
    std::cout << "Процент заполнености таблицы равно " << (float)N / T * 100 << "%\n";
    std::cout << "Среднее количество проб  необходимых для размещения элемента равно " << (float)sum_i / N << "\n";
}

int main()
{
    setlocale(LC_ALL, "Russian");
    srand(time(NULL));
   
      sum_i = 0;
    //заполнение таблицы значениями, не удовлетворяющие размерности 
    for (int i = 0; i < T; i++)
        hash[i] =0;
  
    for (int j = 0; j < N; j++) {
        int k = rand()%900+100;// получаем рандомное число
        int f_k = (k + 49) % T;// вычисляем значение хеш-функции
        int i = 0;//номер пробы

        while (true) {
            sum_i++;
            if (hash[(f_k + i * i) % T] == 0 || hash[(f_k + i * i) % T] == k) {//если ячейка свободна или значение в ячейке равно значению вставляемого
                hash[(f_k + i * i) % T] = k;
                break;
            }
            i++;


        }
    }
    int c=0;
    while (c!=7) {
        std::cout << "1. Добавить введенное число в таблицу\n2. Добавить случайное число в таблицу\n3. Удалить число из таблицы\n4. Вывести таблицу\n5. Поменять число в таблице\n6. Вывести статистику\n";

       std:: cin >> c;
        switch (c)
        {
        case 1:
            std::cout << "Введите число для вставки\n";
            int a;
            std::cin >> a;
            add(a);
            break;
        case 2:
            add_rand();
            break;
        case 3: 
            std::cout << "Введите число, которое нужно удалить\n";
            int b;
            std::cin >> b;
            del (b);
            break;
        case 4:
            print();
            break;
        case 5:
            std::cout << "Введите число, которое нужно заменить, и число, на которое заменяем\n";
            int c, d;
            std::cin >> c >> d;
            change(c,d);
            break;
        case 6:
            stat();
            break;
       
        }
    
    }
    
   

   
    return 0;

}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
